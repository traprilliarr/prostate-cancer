# -*- coding: utf-8 -*-
"""Prostate_Cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tcCmww4xKxT0uRdWEBreC20nj5vXIw6x

# EDA
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

!pip install wquantiles

import pandas as pd
import numpy as np

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA

from sklearn.metrics import precision_score, recall_score
from sklearn.metrics import confusion_matrix, roc_curve, precision_recall_curve, auc

import seaborn as sns
import matplotlib.pylab as plt

cp = pd.read_csv("data.csv")
cp

jumlah_fitur = cp.shape[1]

print("Jumlah fitur: ", jumlah_fitur)

jumlah_data = cp.shape[0]

print("Jumlah data: ", jumlah_data)

cp.info()

# Missing Value Check
cp.isna().sum()

# Coleration Matrix Check
sns.heatmap(cp.corr(),annot=True,vmin=0, vmax=1, center=True)

cp.columns

cp.describe()

cp.groupby('diagnosis_result').mean()

cp.diagnosis_result = [1 if each == 'M' else 0 for each in cp.diagnosis_result]

cp.diagnosis_result.value_counts()

cp2 = pd.get_dummies(cp,columns=['diagnosis_result'],drop_first=True)

cp2.head()

"""# Data Standardization"""

from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()
scaler.fit(cp2.drop('diagnosis_result_1',axis=1))
#removing the last column of the dataframe as this table will be used for the feature matrix
scaled_features=scaler.transform(cp2.drop('diagnosis_result_1',axis=1))
new_data=pd.DataFrame(scaled_features,columns=cp2.columns[:-1])

new_data.head()

x = new_data
y = cp2['diagnosis_result_1']

"""# Data Splitting"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)
method_names=[]
method_scores=[]

"""# Data Visualization"""

fig1, ax1 = plt.subplots(1, 2, figsize=(20, 7))
fig2, ax2 = plt.subplots(figsize=(20, 7))

sns.histplot(data=cp, x="radius", kde=True, ax=ax1[0],color = 'magenta')
sns.boxplot(data=cp, x="radius", ax=ax1[1],color = 'aqua')

sns.violinplot(data=cp, x="radius", ax=ax2,color = 'lime')

plt.show()

cols = ['diagnosis_result']

# Subplot setiap kategori
plt.figure(figsize=(20, 15))
plotnumber = 1
for column in cols:
    if plotnumber <= len(cols):
        ax = plt.subplot(3, 3, plotnumber)
        sns.countplot(cp[column], palette='rocket', color='black')
        plt.xlabel(column)
        plt.title("Countplot of {}".format(column))

    plotnumber += 1

plt.tight_layout()
plt.show()

sns.set_style("ticks")
sns.pairplot(cp,hue="diagnosis_result",size=3);
plt.show()

"""# Add extraction feature (PCA)"""

pca = PCA(n_components=2)  # Ubah jumlah komponen sesuai kebutuhan
x_train_pca = pca.fit_transform(x_train)
x_test_pca = pca.transform(x_test)

"""# Classification (KNN)"""

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

"""Distance Function"""

def euclidean(p1,p2):
  dist = np.sqrt(np.sum((p1-p2)**2))
  return dist

def predict(x_train, y, x_input, k, pca=None):
    if pca is not None:
        x_train = pca.transform(x_train)
        x_input = pca.transform(x_input)

    op_labels = []

    for item in x_input:
        point_dist = []

        for j in range(len(x_train)):
            distances = euclidean(np.array(x_train[j, :]), item)
            point_dist.append(distances)
        point_dist = np.array(point_dist)

        dist = np.argsort(point_dist)[:k]

        labels = y[dist]

        lab = mode(labels)
        lab = lab.mode[0]
        op_labels.append(lab)

    return op_labels

def euclidean(p1,p2):
  dist = np.sqrt(np.sum((p1-p2)**2))
  return dist

"""Calculate KNN"""

n_neighbors = int(input("Masukkan nilai K "))

knn = KNeighborsClassifier(n_neighbors=n_neighbors)
knn.fit(x_train_pca, y_train)

print("K = {}: {}".format(n_neighbors, knn.score(x_test_pca, y_test)))
method_names.append("KNN")
method_scores.append(knn.score(x_test_pca, y_test))

# Confusion Matrix
y_pred = knn.predict(x_test_pca)
conf_mat = confusion_matrix(y_test, y_pred)

# Visualization Confusion Matrix
f, ax = plt.subplots(figsize=(5, 5))
sns.heatmap(conf_mat, annot=True, linewidths=0.5, linecolor="red", fmt=".0f", ax=ax)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

y

knn = KNeighborsClassifier()

knn.fit(x_train_pca,y_train)
pred=knn.predict(x_test_pca)

print(classification_report(y_test, pred))

error_rate = []
for i in range(1, 40):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(x_train_pca, y_train)
    pred_i = knn.predict(x_test_pca)
    error_rate.append(np.mean(pred_i != y_test))

# Grafik Akurasi KNN
plt.figure(figsize=(10, 6))
plt.plot(range(1, 40), error_rate)
plt.title('Grafik Akurasi KNN')
plt.xlabel('Jumlah Tetangga (k)')
plt.ylabel('Error Rate')
plt.show()

# Grafik Akurasi Random Forest
plt.figure(figsize=(10, 6))
plt.plot(range(1, n_estimators + 1), rf.score(x_test_pca, y_test))
plt.title('Grafik Akurasi Random Forest')
plt.xlabel('Jumlah Pohon (n_estimators)')
plt.ylabel('Akurasi')
plt.show()

"""# Random Forest"""

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics

n_estimators = int(input("Masukkan jumlah Pohon: "))
rf = RandomForestClassifier(class_weight="balanced", n_estimators=n_estimators, random_state=1)
rf.fit(x_train_pca, y_train)

y_pred_rf = rf.predict(x_test_pca)
acc = metrics.accuracy_score(y_pred_rf, y_test.values.ravel()) * 100
print("Random Forest Algorithm Accuracy Score: {:.2f}%".format(acc))
print("Accuracy Score is {:.2f}%".format(acc))

conf_mat_rf = confusion_matrix(y_test, y_pred_rf)

# Visualization Confusion Matrix
f, ax = plt.subplots(figsize=(5, 5))
sns.heatmap(conf_mat_rf, annot=True, linewidths=0.5, linecolor="red", fmt=".0f", ax=ax)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

rf.fit(x_train_pca, y_train.values.ravel())
y_pred = rf.predict(x_test_pca)

print(classification_report(y_test, y_pred))

"""# Save the Training Model"""

import pickle

models = {
    'Random Forest': rf,
    'KNN': knn
}

with open('models.sav', 'wb') as f:
    pickle.dump(models, f)