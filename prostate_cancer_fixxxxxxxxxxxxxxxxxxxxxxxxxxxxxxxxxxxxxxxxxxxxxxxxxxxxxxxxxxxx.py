# -*- coding: utf-8 -*-
"""Prostate_Cancer_Fix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zef2iH_amSokah1F16yQN7QVfKPuPtYS

# EDA
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

!pip install wquantiles

import pandas as pd
import numpy as np

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA

from sklearn.metrics import precision_score, recall_score
from sklearn.metrics import confusion_matrix, roc_curve, precision_recall_curve, auc

import seaborn as sns
import matplotlib.pylab as plt

cp = pd.read_csv("data.csv")
cp

jumlah_fitur = cp.shape[1]

print("Jumlah fitur: ", jumlah_fitur)

jumlah_data = cp.shape[0]

print("Jumlah data: ", jumlah_data)

cp.info()

# Missing Value Check
cp.isna().sum()

# Coleration Matrix Check
sns.heatmap(cp.corr(),annot=True,vmin=0, vmax=1, center=True)

cp.columns

cp.describe()

cp.groupby('diagnosis_result').mean()

cp.diagnosis_result = [1 if each == 'M' else 0 for each in cp.diagnosis_result]

cp.diagnosis_result.value_counts()

cp2 = pd.get_dummies(cp,columns=['diagnosis_result'],drop_first=True)

cp2.head()

"""# Data Standardization"""

from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler

scaler=StandardScaler()
scaler.fit(cp2[['radius', 'texture', 'perimeter', 'area', 'smoothness', 'compactness', 'symmetry', 'fractal_dimension']])
#removing the last column of the dataframe as this table will be used for the feature matrix
scaled_features=scaler.transform(cp2[['radius', 'texture', 'perimeter', 'area', 'smoothness', 'compactness', 'symmetry', 'fractal_dimension']])
new_data=pd.DataFrame(scaled_features,columns=cp2.drop(['diagnosis_result_1','id'], axis=1).columns)

new_data.head()

new_data.head()

x = new_data
y = cp2['diagnosis_result_1']

x

"""# Data Splitting"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)
method_names=[]
method_scores=[]

"""# Data Visualization"""

fig1, ax1 = plt.subplots(1, 2, figsize=(20, 7))
fig2, ax2 = plt.subplots(figsize=(20, 7))

sns.histplot(data=cp, x="radius", kde=True, ax=ax1[0],color = 'magenta')
sns.boxplot(data=cp, x="radius", ax=ax1[1],color = 'aqua')

sns.violinplot(data=cp, x="radius", ax=ax2,color = 'lime')

plt.show()

cols = ['diagnosis_result']

# Subplot setiap kategori
plt.figure(figsize=(20, 15))
plotnumber = 1
for column in cols:
    if plotnumber <= len(cols):
        ax = plt.subplot(3, 3, plotnumber)
        sns.countplot(cp[column], palette='rocket', color='black')
        plt.xlabel(column)
        plt.title("Countplot of {}".format(column))

    plotnumber += 1

plt.tight_layout()
plt.show()

sns.set_style("ticks")
sns.pairplot(cp,hue="diagnosis_result",size=3);
plt.show()

"""# Add extraction feature (PCA)"""

pca = PCA(n_components=8)  # Ubah jumlah komponen sesuai kebutuhan
x_train_pca = pca.fit_transform(x_train)
x_test_pca = pca.transform(x_test)

"""# Classification (KNN)"""

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

"""Distance Function"""

def euclidean(p1,p2):
  dist = np.sqrt(np.sum((p1-p2)**2))
  return dist

def predict(x_train, y, x_input, k, pca=None):
    if pca is not None:
        x_train = pca.transform(x_train)
        x_input = pca.transform(x_input)

    op_labels = []

    for item in x_input:
        point_dist = []

        for j in range(len(x_train)):
            distances = euclidean(np.array(x_train[j, :]), item)
            point_dist.append(distances)
        point_dist = np.array(point_dist)

        dist = np.argsort(point_dist)[:k]

        labels = y[dist]

        lab = mode(labels)
        lab = lab.mode[0]
        op_labels.append(lab)

    return op_labels

def euclidean(p1,p2):
  dist = np.sqrt(np.sum((p1-p2)**2))
  return dist

"""Calculate KNN"""

n_neighbors = int(input("Masukkan nilai K "))

knn = KNeighborsClassifier(n_neighbors=n_neighbors, metric=euclidean)
knn.fit(x_train_pca, y_train)

print("K = {}: {}".format(n_neighbors, knn.score(x_test_pca, y_test)))
method_names.append("KNN")
method_scores.append(knn.score(x_test_pca, y_test))

# Confusion Matrix
y_pred = knn.predict(x_test_pca)
conf_mat = confusion_matrix(y_test, y_pred)

# Visualization Confusion Matrix
f, ax = plt.subplots(figsize=(5, 5))
sns.heatmap(conf_mat, annot=True, linewidths=0.5, linecolor="red", fmt=".0f", ax=ax)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

y

knn.fit(x_train_pca,y_train)
pred=knn.predict(x_test_pca)

print(classification_report(y_test, pred))

error_rate = []
for i in range(1, 40):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(x_train_pca, y_train)
    pred_i = knn.predict(x_test_pca)
    error_rate.append(np.mean(pred_i != y_test))

score = []
k_values = range(1, 20)

for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(x_train, y_train.values.ravel())
    score.append(knn.score(x_test, y_test.values.ravel()))

plt.plot(k_values, score)
plt.xlabel("K neighbors")
plt.ylabel("Score")
plt.xticks(range(1, 20))
plt.title("Grafik Akurasi Berdasarkan Nilai K")
plt.show()

acc = max(score) * 100
print("Maximum KNN Score is {:.2f}%".format(acc))
print("Accuracy Score is {:.2f}%".format(acc))

k_values = range(1, 20)
precisions = []
accuracies = []
recalls = []
supports = []

for k in k_values:
    # Fit KNN model with current K value
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(x_train_pca, y_train)
    y_pred_knn = knn.predict(x_test_pca)

    # Get classification report
    report = classification_report(y_test, y_pred_knn, output_dict=True)

    # Extract Precision, Recall, and Support
    precision = report["weighted avg"]["precision"]
    recall = report["weighted avg"]["recall"]
    support = report["weighted avg"]["support"]

    # Append metric values to the respective lists
    precisions.append(precision)
    recalls.append(recall)
    supports.append(support)

# Plot the graph
plt.figure(figsize=(10, 6))
plt.plot(k_values, precisions, marker='o', color='red', label='Precision')
plt.plot(k_values, [acc/100] * len(k_values), marker='o', color='blue', label='Accuracy')
plt.plot(k_values, recalls, marker='o', color='green', label='Recall')
plt.plot(k_values, supports, marker='o', color='orange', label='Support')
plt.xlabel("K neighbors")
plt.ylabel("Value")
plt.title("KNN Classification Metrics vs. K neighbors")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""# Random Forest"""

from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics

n_estimators = int(input("Masukkan jumlah Pohon: "))
rf = RandomForestClassifier(class_weight="balanced", n_estimators=n_estimators)
rf.fit(x_train_pca, y_train)

y_pred_rf = rf.predict(x_test_pca)
acc = metrics.accuracy_score(y_pred_rf, y_test.values.ravel()) * 100
print("Random Forest Algorithm Accuracy Score: {:.2f}%".format(acc))
print("Accuracy Score is {:.2f}%".format(acc))

conf_mat_rf = confusion_matrix(y_test, y_pred_rf)

# Visualization Confusion Matrix
f, ax = plt.subplots(figsize=(5, 5))
sns.heatmap(conf_mat_rf, annot=True, linewidths=0.5, linecolor="red", fmt=".0f", ax=ax)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

rf.fit(x_train_pca, y_train.values.ravel())
y_pred = rf.predict(x_test_pca)

print(classification_report(y_test, y_pred))

n_estimators_values = range(10, 1001, 50)

rf_accuracies = []

for n_estimators in n_estimators_values:
    rf = RandomForestClassifier(class_weight="balanced", n_estimators=n_estimators)
    rf.fit(x_train_pca, y_train)
    y_pred_rf = rf.predict(x_test_pca)
    acc = metrics.accuracy_score(y_pred_rf, y_test.values.ravel()) * 100
    rf_accuracies.append(acc)

# Plotting the results
plt.plot(n_estimators_values, rf_accuracies, marker='o', color='red')
plt.xlabel("Number of Estimators")
plt.ylabel("Accuracy")
plt.title("Grafik Akurasi Berdasarkan Jumlah Pohon")
plt.grid(True)
plt.tight_layout()
plt.show()

acc = max(rf_accuracies)
print("Maximum Random Forest Score is {:.2f}%".format(acc))
print("Accuracy Score is {:.2f}%".format(acc))

# Fit KNN and Random Forest models
knn = KNeighborsClassifier(n_neighbors=n_neighbors)
knn.fit(x_train_pca, y_train)

rf = RandomForestClassifier(class_weight="balanced", n_estimators=n_estimators)
rf.fit(x_train_pca, y_train)

# Make predictions
y_pred_knn = knn.predict(x_test_pca)
y_pred_rf = rf.predict(x_test_pca)

# Calculate precision, recall, and accuracy for both models
precision_knn = precision_score(y_test, y_pred_knn)
recall_knn = recall_score(y_test, y_pred_knn)
accuracy_knn = accuracy_score(y_test, y_pred_knn)

precision_rf = precision_score(y_test, y_pred_rf)
recall_rf = recall_score(y_test, y_pred_rf)
accuracy_rf = accuracy_score(y_test, y_pred_rf)

# Combine the results into a DataFrame
data = {
    'Metric': ['Precision', 'Recall', 'Accuracy'],
    'KNN': [precision_knn, recall_knn, accuracy_knn],
    'Random Forest': [precision_rf, recall_rf, accuracy_rf]
}
result_df = pd.DataFrame(data)

# Plotting the results
plt.figure(figsize=(8, 6))
width = 0.3

x = np.arange(len(result_df['Metric']))
plt.bar(x - width/2, result_df['KNN'], width=width, color='blue', label='KNN')
plt.bar(x + width/2, result_df['Random Forest'], width=width, color='red', label='Random Forest')

plt.xticks(x, result_df['Metric'])
plt.ylabel('Score')
plt.title('Perbandingan Hasil Klasifikasi (KNN vs Random Forest)')
plt.legend()
plt.show()

n_estimators_values = range(10, 1001, 50)
rf_precisions = []
rf_accuracies = []
rf_recalls = []
rf_supports = []

for n_estimators in n_estimators_values:
    # Fit Random Forest model with current n_estimators value
    rf = RandomForestClassifier(class_weight="balanced", n_estimators=n_estimators, random_state=123)
    rf.fit(x_train_pca, y_train)
    y_pred_rf = rf.predict(x_test_pca)

    # Get classification report
    report = classification_report(y_test, y_pred_rf, output_dict=True)

    # Extract Precision, Recall, and Support
    precision = report["weighted avg"]["precision"]
    recall = report["weighted avg"]["recall"]
    support = report["weighted avg"]["support"]

    # Append metric values to the respective lists
    rf_precisions.append(precision)
    rf_recalls.append(recall)
    rf_supports.append(support)

# Plot the graph
plt.figure(figsize=(10, 6))
plt.plot(n_estimators_values, rf_precisions, marker='o', color='red', label='Precision')
plt.plot(n_estimators_values, [acc/100] * len(n_estimators_values), marker='o', color='blue', label='Accuracy')
plt.plot(n_estimators_values, rf_recalls, marker='o', color='green', label='Recall')
plt.plot(n_estimators_values, rf_supports, marker='o', color='orange', label='Support')
plt.xlabel("Number of Estimators (n_estimators)")
plt.ylabel("Value")
plt.title("Random Forest Classification Metrics vs. Number of Estimators")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

x

input_pca

new_data_input

radius = float(input("Masukkan nilai radius: "))
texture = float(input("Masukkan nilai texture: "))
perimeter = float(input("Masukkan nilai perimeter: "))
area = float(input("Masukkan nilai area: "))
smoothness = float(input("Masukkan nilai smoothness: "))
compactness = float(input("Masukkan nilai compactness: "))
symmetry = float(input("Masukkan nilai symmetry: "))
fractal_dimension = float(input("Masukkan nilai fractal dimension: "))

new_data_input = [[radius, texture, perimeter, area, smoothness, compactness, symmetry, fractal_dimension]]

input_scaled = scaler.transform(new_data_input)

input_pca = pca.transform(input_scaled)

knn_prediction = knn.predict(input_pca)
rf_prediction = rf.predict(input_pca)
if knn_prediction[0] == 1:
    print("Orang tersebut sakit (KNN)")
else:
    print("Orang tersebut tidak sakit (KNN)")

if rf_prediction[0] == 1:
    print("Orang tersebut sakit (Random Forest)")
else:
    print("Orang tersebut tidak sakit (Random Forest)")

"""# Save the Training Model"""

import pickle

models = {
    'Random Forest': rf,
    'KNN': knn,
    'Scaler' : scaler,
    'PCA' : pca
}

with open('models.sav', 'wb') as f:
    pickle.dump(models, f)

scaler = models["Scaler"]